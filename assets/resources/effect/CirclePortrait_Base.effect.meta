{
  "ver": "1.0.22",
  "uuid": "31828510-4860-40dd-b048-a29db0eadf07",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\n\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\n\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n\n  v_color = a_color;\n\n  gl_Position = pos;\n}\n",
        "frag": "\nprecision highp float;\n\nuniform sampler2D texture;\n\nvarying vec2 v_uv0;\nuniform vec4 color0;\nuniform vec4 edge_color0;\nuniform float u_edge;\nuniform float edge_blur;\nvec4 drawCircle() {\n    float edge = u_edge;\n    float dis = 0.0;\n \n    vec2 uv = v_uv0;\n         \n        if ( uv.x < edge )\n        {\n            if ( uv.y < edge )\n            {\n                dis = distance( uv, vec2(edge, edge) );\n            }\n            if ( uv.y > (1.0 - edge) )\n            {\n                dis = distance( uv, vec2(edge, (1.0 - edge)) );\n            }\n        }\n        else if ( uv.x > (1.0 - edge) )\n        {\n            if ( uv.y < edge )\n            {\n                dis = distance( uv, vec2((1.0 - edge), edge ) );\n            }\n            if ( uv.y > (1.0 - edge) )\n            {\n                dis = distance( uv, vec2((1.0 - edge), (1.0 - edge) ) );\n            }\n        }\n\n        vec4 color = color0 * texture2D(texture,uv);\n\n        vec4 edge_color = color;\n\n        float blur = edge_blur;\n\n          edge_color = edge_color0  * texture2D(texture,uv);\n\n        if(dis > 0.001)\n        {\n\n            float gap = edge * blur;\n            if(dis <= edge - gap)\n            {\n                color = color;\n            }\n            else if(dis <= edge)\n            {\n\n                float t = smoothstep(0.,gap,edge-dis);\n\n                color = vec4(edge_color.rgb,t * edge_color.a);\n            }else{\n\n                color = vec4(edge_color.rgb,0.); \n            }\n        }\n        else\n        {\n          color =  color;\n        }\n    return  color; \n}\n \n    void main()\n    {\n      vec4 color = drawCircle();\n      gl_FragColor = color;\n    }\n"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  vec4 cc_time;\n\n  vec4 cc_screenSize;\n\n  vec4 cc_screenScale;\n\n  vec4 cc_nativeSize;\n\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n\n  vec4 cc_exposure;\n\n  vec4 cc_mainLitDir;\n\n  vec4 cc_mainLitColor;\n\n  vec4 cc_ambientSky;\n  vec4 cc_ambientGround;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\n\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\n\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n\n  v_color = a_color;\n\n  gl_Position = pos;\n}\n",
        "frag": "\nprecision highp float;\n\nuniform sampler2D texture;\n\nvarying vec2 v_uv0;\nuniform ARGS{\n    vec4 color0; \n    vec4 edge_color0;\n    float u_edge;\n    float edge_blur; \n}\n\nvec4 drawCircle() {\n    float edge = u_edge;\n    float dis = 0.0;\n \n    vec2 uv = v_uv0;\n         \n        if ( uv.x < edge )\n        {\n            if ( uv.y < edge )\n            {\n                dis = distance( uv, vec2(edge, edge) );\n            }\n            if ( uv.y > (1.0 - edge) )\n            {\n                dis = distance( uv, vec2(edge, (1.0 - edge)) );\n            }\n        }\n        else if ( uv.x > (1.0 - edge) )\n        {\n            if ( uv.y < edge )\n            {\n                dis = distance( uv, vec2((1.0 - edge), edge ) );\n            }\n            if ( uv.y > (1.0 - edge) )\n            {\n                dis = distance( uv, vec2((1.0 - edge), (1.0 - edge) ) );\n            }\n        }\n\n        vec4 color = color0 * texture2D(texture,uv);\n\n        vec4 edge_color = color;\n\n        float blur = edge_blur;\n\n          edge_color = edge_color0  * texture2D(texture,uv);\n\n        if(dis > 0.001)\n        {\n\n            float gap = edge * blur;\n            if(dis <= edge - gap)\n            {\n                color = color;\n            }\n            else if(dis <= edge)\n            {\n\n                float t = smoothstep(0.,gap,edge-dis);\n\n                color = vec4(edge_color.rgb,t * edge_color.a);\n            }else{\n\n                color = vec4(edge_color.rgb,0.); \n            }\n        }\n        else\n        {\n          color =  color;\n        }\n    return  color; \n}\n \n    void main()\n    {\n      vec4 color = drawCircle();\n      gl_FragColor = color;\n    }\n"
      }
    }
  ],
  "subMetas": {}
}