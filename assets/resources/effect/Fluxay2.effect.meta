{
  "ver": "1.0.22",
  "uuid": "4eecf4b5-f0b7-4895-8bfc-1737bf6ed3a2",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\n\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\n\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n\n  v_color = a_color;\n\n  gl_Position = pos;\n}\n",
        "frag": "\nprecision highp float;\n\n  uniform sampler2D texture;\n\n  varying vec2 v_uv0;                \n\n  uniform vec4 color;\nuniform float factor;\nuniform float width;\nuniform float time;\nvoid main()                                      \n  {                                          \n      vec4 texColor = texture2D(texture, v_uv0);  \n  \n      float distance = abs(v_uv0[0]+v_uv0[1]-tan(time))/1.414;   \n\n      distance = 1.0-(1.0/width)*distance;  \n      distance = max(distance, 0.0);  \n      vec4 sample = vec4(0.0,0.0,0.0,0.0);  \n      sample[0] = color[0] * distance;  \n      sample[1] = color[1] * distance;  \n      sample[2] = color[2] * distance;  \n      sample[3] = distance;  \n\n      float alpha = sample[3]*texColor[3];  \n      texColor[0] = texColor[0] + sample[0]*alpha*factor;  \n      texColor[1] = texColor[1] + sample[1]*alpha*factor;  \n      texColor[2] = texColor[2] + sample[2]*alpha*factor;  \n      gl_FragColor = texColor;  \n  }\n"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  vec4 cc_time;\n\n  vec4 cc_screenSize;\n\n  vec4 cc_screenScale;\n\n  vec4 cc_nativeSize;\n\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n\n  vec4 cc_exposure;\n\n  vec4 cc_mainLitDir;\n\n  vec4 cc_mainLitColor;\n\n  vec4 cc_ambientSky;\n  vec4 cc_ambientGround;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\n\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\n\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n\n  v_color = a_color;\n\n  gl_Position = pos;\n}\n",
        "frag": "\nprecision highp float;\n\n  uniform sampler2D texture;\n\n  varying vec2 v_uv0;                \n\n  uniform PROPERTIES{\n    vec4  color;\n    float factor;  \n    float width; \n    float time;\n  }\n\n  void main()                                      \n  {                                          \n      vec4 texColor = texture2D(texture, v_uv0);  \n  \n      float distance = abs(v_uv0[0]+v_uv0[1]-tan(time))/1.414;   \n\n      distance = 1.0-(1.0/width)*distance;  \n      distance = max(distance, 0.0);  \n      vec4 sample = vec4(0.0,0.0,0.0,0.0);  \n      sample[0] = color[0] * distance;  \n      sample[1] = color[1] * distance;  \n      sample[2] = color[2] * distance;  \n      sample[3] = distance;  \n\n      float alpha = sample[3]*texColor[3];  \n      texColor[0] = texColor[0] + sample[0]*alpha*factor;  \n      texColor[1] = texColor[1] + sample[1]*alpha*factor;  \n      texColor[2] = texColor[2] + sample[2]*alpha*factor;  \n      gl_FragColor = texColor;  \n  }\n"
      }
    }
  ],
  "subMetas": {}
}