// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        iResolution: { value: [1280, 720] }
        mouse: { value: [520, 280] }
        radius: { value: [100,100] }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
 
 
    // 贴图采样器，来自于v2f管线
    uniform sampler2D texture;
    // 当前点uv
    varying vec2 v_uv0;
    
    uniform properties {
        vec2 iResolution;
        vec2 mouse;
        vec2 radius;
    }
 
    void mainImage( out vec4 fragColor, in vec2 uv )
    {
        // y坐标翻转
        vec2 imouse = vec2(mouse.x, iResolution.y - mouse.y);
        // 纹理采样
        vec4 tex = texture2D(texture, uv);
        // 片元到鼠标点的差向量
        vec2 d = uv*iResolution.xy -imouse.xy ;
        // 光照半径
        vec2 s = radius;
        // 点积取比例
        float r = dot(d, d)/dot(s,s);
        vec4 finalColor =  tex * (1.08 - r);   
        fragColor = vec4(finalColor.rgb,0.75);
    }
    void main()
    {
        mainImage(gl_FragColor, v_uv0.xy);
    }
}%
