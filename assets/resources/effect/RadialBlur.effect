// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        iCenter: { value: [0.5,0.5] }
        iResolution: { value: [1280, 720, 0, 0] }
        Strength: { value: 0.125 }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
    precision highp float;
 
    uniform sampler2D texture;
    varying vec2 v_uv0;
    uniform PROPERTIES {
        vec4 iResolution;
        vec2 iCenter;
        float Strength;
    }
    
    void mainImage( out vec4 fragColor, in vec2 fragCoord )
    {
        // const float Strength = 0.125;    
        const int Samples = 64; //multiple of 2
        
        vec2 uv = fragCoord.xy;
        
        vec2 dir = (fragCoord.xy-iCenter.xy);
    
        vec4 color = vec4(0.0,0.0,0.0,0.0);
        
        for (int i = 0; i < Samples; i += 2) //operating at 2 samples for better performance
        {
            color += texture2D(texture,uv+float(i)/float(Samples)*dir*Strength);
            color += texture2D(texture,uv+float(i+1)/float(Samples)*dir*Strength);
        }   
        
        fragColor = color/float(Samples);
    }
        
    void main(void)
    {
        mainImage(gl_FragColor, v_uv0);
    }
}%

